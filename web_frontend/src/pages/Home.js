// src\pages\Home.js
import React, { useEffect, useState, useMemo, useRef } from 'react';
import { useAuth } from '../context/AuthContext';
import { getMovies, getAllGenres } from '../services/api';
import MovieList from '../components/MovieList';
import { Link, useSearchParams } from 'react-router-dom';
import './Home.css'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Ç–∏–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const SEARCH_DEBOUNCE_TIME = 500; // ms
const MAX_SEARCH_LENGTH = 100;
const DEFAULT_PAGE_SIZE = 20;
// --- –û–ø—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∫–∞–∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
const SORT_OPTIONS = {
  RECOMMENDED: '', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  LATEST: 'latest',
  UPCOMING: 'upcoming'
};

function Home() {
  const [movies, setMovies] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isStaff, setIsStaff] = useState(false);
  const [checkingPrivileges, setCheckingPrivileges] = useState(true);
  const [availableGenres, setAvailableGenres] = useState([]);
  const [totalMovies, setTotalMovies] = useState(0);
  const { user, fetchUserPrivileges } = useAuth();
  const [searchParams, setSearchParams] = useSearchParams();
  // --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
  const [areFiltersVisible, setAreFiltersVisible] = useState(true); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç
  // --- Ref –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –±—ã–ª –ª–∏ –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä ---
  const isFirstRender = useRef(true);
  // --- –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL ---
  const filtersFromUrl = useMemo(() => {
    return {
      search: searchParams.get('search') || '',
      genres: searchParams.getAll('genres'),
      year: searchParams.get('year') || '',
      sort: searchParams.get('sort') || SORT_OPTIONS.RECOMMENDED, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
      page: parseInt(searchParams.get('page'), 10) || 1,
    };
  }, [searchParams]);
  // --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–∞ ---
  const [localSearchQuery, setLocalSearchQuery] = useState(filtersFromUrl.search);
  // --- –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∂–∞–Ω—Ä–æ–≤ ---
  useEffect(() => {
    const fetchGenres = async () => {
      try {
        const response = await getAllGenres();
        setAvailableGenres(Array.isArray(response.data) ? response.data : []);
      } catch (err) {
        console.error('Failed to fetch genres for filter:', err);
        setAvailableGenres([]);
      }
    };
    fetchGenres();
  }, []);
  // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
  useEffect(() => {
    const checkPrivileges = async () => {
      setCheckingPrivileges(true);
      if (user) {
        try {
          const privileges = await fetchUserPrivileges();
          setIsStaff(!!privileges?.is_staff);
        } catch (err) {
          console.error("Home: Failed to fetch privileges:", err);
          setIsStaff(false);
        }
      } else {
        setIsStaff(false);
      }
      setCheckingPrivileges(false);
    };
    checkPrivileges();
  }, [user, fetchUserPrivileges]);
  // --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è URL —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ---
  const updateUrl = (newParams) => {
    const params = new URLSearchParams();
    if (newParams.search) params.set('search', newParams.search);
    newParams.genres?.forEach(genre => {
      if (genre) params.append('genres', genre);
    });
    if (newParams.year) params.set('year', newParams.year);
    if (newParams.sort && newParams.sort !== SORT_OPTIONS.RECOMMENDED) params.set('sort', newParams.sort); // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º 'sort' –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ)
    if (newParams.page && newParams.page > 1) params.set('page', newParams.page);
    setSearchParams(params);
  };
  // --- –û–°–ù–û–í–ù–û–ô useEffect: –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å–º–æ–≤ ---
  useEffect(() => {
    setLocalSearchQuery(filtersFromUrl.search); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
    const loadMovies = async () => {
      if (!user) {
        setLoading(false);
        setError('Please login to view movies');
        return;
      }
      setLoading(true);
      setError(null);
      try {
        const response = await getMovies(
          filtersFromUrl.page,
          DEFAULT_PAGE_SIZE,
          filtersFromUrl.search,
          filtersFromUrl.genres,
          filtersFromUrl.year,
          filtersFromUrl.sort
        );
        if (response.data && Array.isArray(response.data.results)) {
          setMovies(response.data.results);
          setTotalMovies(response.data.count || 0);
        } else {
          const data = response.data || [];
          setMovies(Array.isArray(data) ? data : []);
          setTotalMovies(Array.isArray(data) ? data.length : 0);
        }
      } catch (err) {
        console.error('Failed to fetch movies:', err);
        const errorMessage = err.response?.data?.detail || err.response?.data?.message || err.message || 'Failed to load movies';
        setError(errorMessage);
        setMovies([]);
        setTotalMovies(0);
      } finally {
        setLoading(false);
      }
    };
    loadMovies();
  }, [filtersFromUrl, user]);
  // --- –î–µ–±–∞—É–Ω—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ ---
  useEffect(() => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–±–∞—É–Ω—Å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }
    if (localSearchQuery === filtersFromUrl.search) {
      return;
    }
    const handler = setTimeout(() => {
      updateUrl({
        ...filtersFromUrl,
        search: localSearchQuery,
        page: 1
      });
    }, SEARCH_DEBOUNCE_TIME);
    return () => {
      clearTimeout(handler);
    };
  }, [localSearchQuery, filtersFromUrl]);
  // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤ ---
  const handleGenreChange = (selectedGenres) => {
    updateUrl({ ...filtersFromUrl, genres: selectedGenres, page: 1 });
  };
  const handleYearChange = (e) => {
    const value = e.target.value;
    // –£–ø—Ä–æ—â–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≥–æ–¥–∞
    if (value === '' || (value >= 1888 && value <= new Date().getFullYear() + 10)) {
      updateUrl({ ...filtersFromUrl, year: value, page: 1 });
    }
  };
  // --- –ù–û–í–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ---
  const handleSortChange = (newSortOption) => {
    updateUrl({ ...filtersFromUrl, sort: newSortOption, page: 1 });
  };
  const handleResetFilters = () => {
    setSearchParams({});
    setLocalSearchQuery('');
  };
  const handlePageChange = (newPage) => {
    updateUrl({ ...filtersFromUrl, page: newPage });
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };
  const handleSearchChange = (e) => {
    const value = e.target.value.slice(0, MAX_SEARCH_LENGTH);
    setLocalSearchQuery(value);
  };
  // --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–æ–≤ ---
  const GenreSelect = ({ genres, selectedGenres, onChange }) => {
    const handleChange = (genreName) => {
      const newSelectedGenres = selectedGenres.includes(genreName)
        ? selectedGenres.filter(g => g !== genreName)
        : [...selectedGenres, genreName];
      onChange(newSelectedGenres);
    };
    return (
      <div className="genre-select-container">
        {genres.map((genre) => (
          <button
            key={genre.id}
            type="button"
            className={`genre-tag ${selectedGenres.includes(genre.name) ? 'selected' : ''}`}
            onClick={() => handleChange(genre.name)}
            aria-pressed={selectedGenres.includes(genre.name)}
          >
            {genre.name}
          </button>
        ))}
      </div>
    );
  };
  // --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞ –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ ---
  const YearSelect = ({ value, onChange, availableYears }) => {
    return (
      <select
        id="year-select"
        value={value}
        onChange={onChange}
        className="year-select"
      >
        <option value="">–õ—é–±–æ–π –≥–æ–¥</option>
        {availableYears.map(year => (
          <option key={year} value={year}>{year}</option>
        ))}
      </select>
    );
  };
  // --- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–µ—Ç ---
  const availableYears = useMemo(() => {
    const currentYear = new Date().getFullYear();
    const years = [];
    for (let i = currentYear + 10; i >= 1888; i--) {
      years.push(i);
    }
    return years;
  }, []);
  // --- –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü ---
  const totalPages = Math.ceil(totalMovies / DEFAULT_PAGE_SIZE);
  // --- –†–µ–Ω–¥–µ—Ä ---
  if (checkingPrivileges) {
    return <div className="loading">Checking permissions...</div>;
  }
  if (error && !loading) {
    return <div className="error">{error}</div>;
  }
  return (
    <div className="home-page">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className="home-header">
        <h1 className="page-title">–§–∏–ª—å–º—ã</h1>
        {isStaff && (
          <Link to="/movies/add" className="add-movie-button">
            –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º
          </Link>
        )}
      </div>

      {/* --- –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–û–ò–°–ö –°–í–ï–†–•–£ --- */}
      <div className="enhanced-search-container">
        <span className="enhanced-search-icon">üîç</span>
        <input
          type="text"
          id="enhanced-search-input"
          value={localSearchQuery}
          onChange={handleSearchChange}
          placeholder="–ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤..."
          maxLength={MAX_SEARCH_LENGTH}
          className="enhanced-search-input"
        />
        <span className="char-count-enhanced">{localSearchQuery.length}/{MAX_SEARCH_LENGTH}</span>
      </div>

      {/* --- –ö–ù–û–ü–ö–ò –°–û–†–¢–ò–†–û–í–ö–ò --- */}
      <div className="sort-buttons-container">
        <button
          className={`sort-button ${filtersFromUrl.sort === SORT_OPTIONS.RECOMMENDED ? 'active' : ''}`}
          onClick={() => handleSortChange(SORT_OPTIONS.RECOMMENDED)}
        >
          –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ
        </button>
        <button
          className={`sort-button ${filtersFromUrl.sort === SORT_OPTIONS.LATEST ? 'active' : ''}`}
          onClick={() => handleSortChange(SORT_OPTIONS.LATEST)}
        >
          –ù–æ–≤–∏–Ω–∫–∏
        </button>
        <button
          className={`sort-button ${filtersFromUrl.sort === SORT_OPTIONS.UPCOMING ? 'active' : ''}`}
          onClick={() => handleSortChange(SORT_OPTIONS.UPCOMING)}
        >
          –ë—É–¥—É—â–∏–µ –ø—Ä–µ–º—å–µ—Ä—ã
        </button>
      </div>

      {/* –°–µ–∫—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è */}
      <div className="filters-section">
        <div className="filters-header">
          <h2>–§–∏–ª—å—Ç—Ä—ã</h2>
          <button
            onClick={() => setAreFiltersVisible(!areFiltersVisible)}
            className="toggle-filters-button-header"
            aria-expanded={areFiltersVisible}
            aria-label={areFiltersVisible ? "–°–∫—Ä—ã—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã" : "–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"}
          >
            {areFiltersVisible ? '–°–∫—Ä—ã—Ç—å ‚ñ≤' : '–ü–æ–∫–∞–∑–∞—Ç—å ‚ñº'}
          </button>
        </div>
        {areFiltersVisible && (
          <div className="filters">
            <div className="filter-group">
              <label>–ñ–∞–Ω—Ä—ã:</label>
              <GenreSelect
                genres={availableGenres}
                selectedGenres={filtersFromUrl.genres}
                onChange={handleGenreChange}
              />
              <small>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∂–∞–Ω—Ä, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä.</small>
            </div>
            <div className="filter-group">
              <label htmlFor="year-select">–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:</label>
              {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞ */}
              <YearSelect
                value={filtersFromUrl.year}
                onChange={handleYearChange}
                availableYears={availableYears}
              />
            </div>
            <div className="filter-group filter-group-reset">
              <button
                onClick={handleResetFilters}
                className="reset-filters-button"
                aria-label="–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã"
              >
                –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
              </button>
            </div>
          </div>
        )}
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="main-content">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */}
        <div className="results-header">
          <h2 className="results-title">
            {filtersFromUrl.search && `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è "${filtersFromUrl.search}"`}
            {filtersFromUrl.genres.length > 0 && `–ñ–∞–Ω—Ä—ã: ${filtersFromUrl.genres.join(', ')}`}
            {filtersFromUrl.year && `–ì–æ–¥: ${filtersFromUrl.year}`}
            {filtersFromUrl.sort === SORT_OPTIONS.LATEST && '–ù–æ–≤–∏–Ω–∫–∏'}
            {filtersFromUrl.sort === SORT_OPTIONS.UPCOMING && '–ë—É–¥—É—â–∏–µ –ø—Ä–µ–º—å–µ—Ä—ã'}
            {
              !filtersFromUrl.search &&
              filtersFromUrl.genres.length === 0 &&
              !filtersFromUrl.year &&
              filtersFromUrl.sort === SORT_OPTIONS.RECOMMENDED &&
              '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ñ–∏–ª—å–º—ã'
            }
          </h2>
        </div>

        {loading && <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–ª—å–º–æ–≤...</div>}
        {!loading && <MovieList movies={movies} />}
        {!loading && totalPages > 1 && (
          <div className="pagination">
            <button
              onClick={() => handlePageChange(filtersFromUrl.page - 1)}
              disabled={filtersFromUrl.page <= 1}
              aria-label="–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
            >
              –ù–∞–∑–∞–¥
            </button>
            <span className="pagination-info">
              –°—Ç—Ä–∞–Ω–∏—Ü–∞ {filtersFromUrl.page} –∏–∑ {totalPages} (–í—Å–µ–≥–æ: {totalMovies})
            </span>
            <button
              onClick={() => handlePageChange(filtersFromUrl.page + 1)}
              disabled={filtersFromUrl.page >= totalPages}
              aria-label="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
            >
              –í–ø–µ—Ä—ë–¥
            </button>
          </div>
        )}
      </div>
    </div>
  );
}
export default Home;